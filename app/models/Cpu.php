<?php

namespace Forge\Models;

/**
 * Cpu
 *
 * @package Forge\Models
 * @autogenerated by Phalcon Developer Tools
 * @date 2019-10-20, 21:08:36
 */
class Cpu extends \Phalcon\Mvc\Model
{
    /**
     *
     * @var integer
     * @Primary
     * @Identity
     * @Column(column="id", type="integer", length=5, nullable=false)
     */
    protected $id;

    /**
     *
     * @var string
     * @Column(column="part", type="string", length=30, nullable=true)
     */
    protected $part;

    /**
     *
     * @var string
     * @Column(column="name", type="string", length=40, nullable=false)
     */
    protected $name;

    /**
     *
     * @var integer
     * @Column(column="model", type="integer", length=5, nullable=false)
     */
    protected $model;

    /**
     *
     * @var string
     * @Column(column="released_date", type="string", nullable=false)
     */
    protected $released_date;

    /**
     *
     * @var integer
     * @Column(column="cores", type="integer", length=3, nullable=true)
     */
    protected $cores;

    /**
     *
     * @var integer
     * @Column(column="threads", type="integer", length=3, nullable=true)
     */
    protected $threads;

    /**
     *
     * @var integer
     * @Column(column="l1_cache_data", type="integer", length=3, nullable=true)
     */
    protected $l1_cache_data;

    /**
     *
     * @var integer
     * @Column(column="l1_cache_instruction", type="integer", length=3, nullable=true)
     */
    protected $l1_cache_instruction;

    /**
     *
     * @var integer
     * @Column(column="l2_cache", type="integer", length=5, nullable=true)
     */
    protected $l2_cache;

    /**
     *
     * @var integer
     * @Column(column="l3_cache", type="integer", length=5, nullable=true)
     */
    protected $l3_cache;

    /**
     *
     * @var integer
     * @Column(column="clock_speed", type="integer", length=4, nullable=true)
     */
    protected $clock_speed;

    /**
     *
     * @var integer
     * @Column(column="turbo_clock_speed", type="integer", length=4, nullable=true)
     */
    protected $turbo_clock_speed;

    /**
     * Method to set the value of field part
     *
     * @param string $part
     * @return $this
     */
    public function setPart($part)
    {
        $this->part = $part;

        return $this;
    }

    /**
     * Method to set the value of field name
     *
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Method to set the value of field model
     *
     * @param integer $model
     * @return $this
     */
    public function setModel($model)
    {
        $this->model = $model;

        return $this;
    }

    /**
     * Method to set the value of field released_date
     *
     * @param string $released_date
     * @return $this
     */
    public function setReleasedDate($released_date)
    {
        $this->released_date = $released_date;

        return $this;
    }

    /**
     * Method to set the value of field cores
     *
     * @param integer $cores
     * @return $this
     */
    public function setCores($cores)
    {
        $this->cores = $cores;

        return $this;
    }

    /**
     * Method to set the value of field threads
     *
     * @param integer $threads
     * @return $this
     */
    public function setThreads($threads)
    {
        $this->threads = $threads;

        return $this;
    }

    /**
     * Method to set the value of field l1_cache_data
     *
     * @param integer $l1_cache_data
     * @return $this
     */
    public function setL1CacheData($l1_cache_data)
    {
        $this->l1_cache_data = $l1_cache_data;

        return $this;
    }

    /**
     * Method to set the value of field l1_cache_instruction
     *
     * @param integer $l1_cache_instruction
     * @return $this
     */
    public function setL1CacheInstruction($l1_cache_instruction)
    {
        $this->l1_cache_instruction = $l1_cache_instruction;

        return $this;
    }

    /**
     * Method to set the value of field l2_cache
     *
     * @param integer $l2_cache
     * @return $this
     */
    public function setL2Cache($l2_cache)
    {
        $this->l2_cache = $l2_cache;

        return $this;
    }

    /**
     * Method to set the value of field l3_cache
     *
     * @param integer $l3_cache
     * @return $this
     */
    public function setL3Cache($l3_cache)
    {
        $this->l3_cache = $l3_cache;

        return $this;
    }

    /**
     * Method to set the value of field clock_speed
     *
     * @param integer $clock_speed
     * @return $this
     */
    public function setClockSpeed($clock_speed)
    {
        $this->clock_speed = $clock_speed;

        return $this;
    }

    /**
     * Method to set the value of field turbo_clock_speed
     *
     * @param integer $turbo_clock_speed
     * @return $this
     */
    public function setTurboClockSpeed($turbo_clock_speed)
    {
        $this->turbo_clock_speed = $turbo_clock_speed;

        return $this;
    }

    /**
     * Returns the value of field id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Returns the value of field part
     *
     * @return string
     */
    public function getPart()
    {
        return $this->part;
    }

    /**
     * Returns the value of field name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Returns the value of field model
     *
     * @return integer
     */
    public function getModel()
    {
        return $this->model;
    }

    /**
     * Returns the value of field released_date
     *
     * @return string
     */
    public function getReleasedDate()
    {
        return $this->released_date;
    }

    /**
     * Returns the value of field cores
     *
     * @return integer
     */
    public function getCores()
    {
        return $this->cores;
    }

    /**
     * Returns the value of field threads
     *
     * @return integer
     */
    public function getThreads()
    {
        return $this->threads;
    }

    /**
     * Returns the value of field l1_cache_data
     *
     * @return integer
     */
    public function getL1CacheData()
    {
        return $this->l1_cache_data;
    }

    /**
     * Returns the value of field l1_cache_instruction
     *
     * @return integer
     */
    public function getL1CacheInstruction()
    {
        return $this->l1_cache_instruction;
    }

    /**
     * Returns the value of field l2_cache
     *
     * @return integer
     */
    public function getL2Cache()
    {
        return $this->l2_cache;
    }

    /**
     * Returns the value of field l3_cache
     *
     * @return integer
     */
    public function getL3Cache()
    {
        return $this->l3_cache;
    }

    /**
     * Returns the value of field clock_speed
     *
     * @return integer
     */
    public function getClockSpeed()
    {
        return $this->clock_speed;
    }

    /**
     * Returns the value of field turbo_clock_speed
     *
     * @return integer
     */
    public function getTurboClockSpeed()
    {
        return $this->turbo_clock_speed;
    }

    /**
     * Initialize method for model.
     */
    public function initialize()
    {
        $this->setSource("cpu");
        $this->belongsTo('model', 'Forge\Models\CpuModel', 'id', ['alias' => 'CpuModel']);
    }

    /**
     * Returns table name mapped in the model.
     *
     * @return string
     */
    public function getSource()
    {
        return 'cpu';
    }

    /**
     * Allows to query a set of records that match the specified conditions
     *
     * @param mixed $parameters
     * @return Cpu[]|Cpu|\Phalcon\Mvc\Model\ResultSetInterface
     */
    public static function find($parameters = null)
    {
        return parent::find($parameters);
    }

    /**
     * Allows to query the first record that match the specified conditions
     *
     * @param mixed $parameters
     * @return Cpu|\Phalcon\Mvc\Model\ResultInterface
     */
    public static function findFirst($parameters = null)
    {
        return parent::findFirst($parameters);
    }

    /**
     * Independent Column Mapping.
     * Keys are the real names in the table and the values their names in the application
     *
     * @return array
     */
    public function columnMap()
    {
        return [
            'id' => 'id',
            'part' => 'part',
            'name' => 'name',
            'model' => 'model',
            'released_date' => 'released_date',
            'cores' => 'cores',
            'threads' => 'threads',
            'l1_cache_data' => 'l1_cache_data',
            'l1_cache_instruction' => 'l1_cache_instruction',
            'l2_cache' => 'l2_cache',
            'l3_cache' => 'l3_cache',
            'clock_speed' => 'clock_speed',
            'turbo_clock_speed' => 'turbo_clock_speed'
        ];
    }
}
